name: Build Moonlight Qt

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

permissions:
  contents: write
  packages: write
  security-events: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
env:
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  build-windows:
    runs-on: windows-2022
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.8.3'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia'
        cache: true

    - name: Get version
      shell: cmd
      run: |
        set /p VERSION=<app\version.txt
        echo VERSION=%VERSION% >> %GITHUB_ENV%

    - name: Setup build environment
      shell: cmd
      run: |
        echo Setting up optimized build environment...
        set NUMBER_OF_PROCESSORS=2
        set JOM_MAX_CPUS=%NUMBER_OF_PROCESSORS%
        echo JOM_MAX_CPUS=%JOM_MAX_CPUS% >> %GITHUB_ENV%
        rem Increase virtual memory to prevent out-of-memory issues
        wmic pagefileset where name="C:\\pagefile.sys" set InitialSize=4096,MaximumSize=8192
        wmic computersystem where name="%computername%" set AutomaticManagedPagefile=False

    - name: Configure build environment
      shell: cmd
      run: |
        echo Configuring build environment for stability...
        rem Set environment variables for stable build
        set CL=/MP2 /Zm500
        set LINKER=/OPT:REF,ICF=5
        rem Disable incremental linking to reduce memory usage
        set LINK=/INCREMENTAL:NO
        rem Disable problematic features during configure
        set QMAKE_CXXFLAGS=-DWIN32_LEAN_AND_MEAN
        echo CL=%CL% >> %GITHUB_ENV%
        echo LINK=%LINK% >> %GITHUB_ENV%
        echo QMAKE_CXXFLAGS=%QMAKE_CXXFLAGS% >> %GITHUB_ENV%
        rem Don't set MAKEFLAGS as it interferes with jom

    - name: Prepare CI build environment
      shell: cmd
      run: |
        echo Preparing CI-specific build configuration...
        rem Create a CI-specific environment variable
        echo MOONLIGHT_CI_BUILD=1 >> %GITHUB_ENV%
        echo CI build environment prepared

    - name: Build Windows x64
      shell: cmd
      run: |
        echo Starting CI-optimized build...
        
        rem Clear any problematic environment variables
        set MAKEFLAGS=
        set _CL_=
        
        rem Build with standard configuration and correct architecture
        echo Building with CI optimizations...
        scripts\build-arch.bat release x64
        if !ERRORLEVEL! NEQ 0 (
          echo Build failed with error !ERRORLEVEL!
          exit /b !ERRORLEVEL!
        )
        
        echo Build Windows x64 completed successfully!

    - name: Install Qt arm64
      uses: jdpurcell/install-qt-action@v5
      with:
        arch: win64_msvc2022_arm64_cross_compiled
        dir: ${{ github.workspace }}\arm64\
        host: windows
        target: desktop
        version: '6.8.3'
        modules: 'qtmultimedia'
        use-naqt: true

    - name: Build Windows arm64
      shell: cmd
      run: |
        copy /y scripts\appveyor\qmake.bat %Qt6_DIR%\bin\
        copy /y scripts\appveyor\qtpaths.bat %Qt6_DIR%\bin\
        copy /y scripts\appveyor\target_qt.conf %Qt6_DIR%\bin\
        scripts\build-arch.bat release arm64
        copy /y build\installer-arm64-release\MoonlightPortable-arm64-$($env:VERSION).zip artifacts\MoonlightPortable-arm64.zip
        copy /y build\symbols-arm64-Release\MoonlightDebuggingSymbols-arm64-$($env:VERSION).zip artifacts\MoonlightDebuggingSymbols-arm64.zip

    - name: Generate universal installer
      shell: cmd
      run: |
        scripts\generate-bundle.bat release

    - name: Upload portable artifact
      uses: actions/upload-artifact@v4
      with:
        name: MoonlightPortable-x64-r${{ env.BUILD_NUMBER }}
        path: build/installer-x64-release/MoonlightPortable-x64-*.zip

    - name: Upload portable artifact arm64
      uses: actions/upload-artifact@v4
      with:
        name: MoonlightPortable-arm64-r${{ env.BUILD_NUMBER }}
        path: build/installer-arm64-release/MoonlightPortable-arm64-*.zip

    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: moonlight-universal-setup-r${{ env.BUILD_NUMBER }}.exe
        path: build/installer-Release/MoonlightSetup-*.exe

  build-macos:
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.6.0'
        modules: 'qtmultimedia'
        cache: true

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install create-dmg
      run: npm install --global create-dmg

    - name: Get version
      run: |
        VERSION=$(cat app/version.txt)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build and generate DMG
      run: |
        scripts/generate-dmg.sh Release

    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: Moonlight-r${{ env.BUILD_NUMBER }}.dmg
        path: build/installer-Release/Moonlight-*.dmg

  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Install Qt 6.8.3
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.8.3'
        modules: 'qtmultimedia'
        cache: true

    - name: Setup local env and metadata
      run: |
        mkdir -p $HOME/local/{bin,include,lib}
        echo "$HOME/local/bin" >> $GITHUB_PATH
        echo "PKG_CONFIG_PATH=$HOME/local/lib/pkgconfig:$HOME/local/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
        echo "VERSION=$(cat app/version.txt)" >> $GITHUB_ENV
        echo "UBUNTU_RELEASE=$(lsb_release -rs)" >> $GITHUB_ENV

    # This may still install various Qt packages, but the later install step will override them
    - name: Install packaged deps
      run: |
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        if [[ $UBUNTU_RELEASE == "20.04" ]]; then
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.280-focal.list https://packages.lunarg.com/vulkan/1.3.280/lunarg-vulkan-1.3.280-focal.list
        else
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.280-jammy.list https://packages.lunarg.com/vulkan/1.3.280/lunarg-vulkan-1.3.280-jammy.list
        fi
        sudo apt update || true
        sudo apt install -y \
          python3-pip nasm libgbm-dev libdrm-dev libfreetype6-dev libasound2-dev \
          libdbus-1-dev libegl1-mesa-dev libgl1-mesa-dev libgles2-mesa-dev libglu1-mesa-dev \
          libibus-1.0-dev libpulse-dev libudev-dev libx11-dev libxcursor-dev libxext-dev \
          libxi-dev libxinerama-dev libxkbcommon-dev libxrandr-dev libxss-dev libxt-dev \
          libxv-dev libxxf86vm-dev libxcb-dri3-dev libx11-xcb-dev libwayland-dev wayland-protocols \
          libopus-dev libvdpau-dev vulkan-sdk qt6-multimedia-dev
        
        # Install XCB runtime libraries for Qt6 XCB platform plugin
        echo "Installing XCB runtime libraries..."
        sudo apt install -y libxcb1 libxcb-cursor0 libxcb-keysyms1 libxcb-image0 libxcb-shm0 libxcb-icccm4 libxcb-sync1 libxcb-xfixes0 libxcb-shape0 libxcb-randr0 libxcb-render0 libxcb-render-util0 libxcb-xinerama0 libxcb-xkb1 libxcb-util1
        sudo pip3 install meson

        if [[ $UBUNTU_RELEASE == "22.04" ]]; then
          # Needed for AppImage
          sudo apt install libfuse2
        fi
    - name: Build SDL2
      run: |
        export SDL2_REV=86fd4ed83cdcf71fef6a57766b126e88f923acd3
        git clone https://github.com/libsdl-org/SDL.git SDL2
        cd SDL2
        git checkout $SDL2_REV
        
        # Check if Wayland is available and configure accordingly
        echo "Checking Wayland availability..."
        if pkg-config --exists wayland-client; then
          echo "Wayland found, enabling Wayland support"
          ./configure --enable-wayland --enable-wayland-shared
        else
          echo "Wayland not found, disabling Wayland support"
          ./configure --disable-wayland
        fi
        
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        cd ..

    - name: Build SDL2_ttf
      run: |
        export SDL2_TTF_VER=2.22.0
        wget https://github.com/libsdl-org/SDL_ttf/releases/download/release-$SDL2_TTF_VER/SDL2_ttf-$SDL2_TTF_VER.tar.gz
        tar -xf SDL2_ttf-$SDL2_TTF_VER.tar.gz
        cd SDL2_ttf-$SDL2_TTF_VER
        ./configure
        make -j$(nproc)
        sudo make install
        cd ..

    - name: Build libva
      run: |
        export LIBVA_VER=2.22.0
        git clone --branch $LIBVA_VER --depth 1 https://github.com/intel/libva.git
        cd libva
        ./autogen.sh
        
        # Configure with conditional Wayland support
        echo "Configuring libva..."
        if pkg-config --exists wayland-client; then
          echo "Configuring libva with Wayland support"
          ./configure --enable-x11 --enable-wayland
        else
          echo "Configuring libva without Wayland support"
          ./configure --enable-x11 --disable-wayland
        fi
        
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        cd ..

    - name: Build dav1d
      run: |
        export DAV1D_VER=1.5.0
        git clone --branch $DAV1D_VER --depth 1 https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        meson setup build -Ddefault_library=static -Dbuildtype=release -Denable_tools=false -Denable_tests=false
        ninja -C build
        sudo ninja install -C build
        sudo ldconfig
        cd ..

    - name: Build libplacebo
      run: |
        export LIBPLACEBO_REV=v7.349.0
        git clone https://code.videolan.org/videolan/libplacebo.git
        cd libplacebo
        git checkout $LIBPLACEBO_REV
        if [ -f ../app/deploy/linux/appimage/*.patch ]; then
          git apply ../app/deploy/linux/appimage/*.patch
        fi
        git submodule update --init --recursive
        meson setup build -Dvulkan=enabled -Dopengl=disabled -Ddemos=false
        ninja -C build
        sudo ninja install -C build
        sudo ldconfig
        cd ..

    - name: Build FFmpeg
      run: |
        export FFMPEG_REV=87ccf995cb855f0baced9916928b7b48d8b6ed9d
        export FFMPEG_CONFIGURE_ARGS="--enable-pic --disable-static --enable-shared --disable-all --enable-avcodec --enable-avformat --enable-swscale --enable-decoder=h264 --enable-decoder=hevc --enable-decoder=av1 --enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi --enable-hwaccel=av1_vaapi --enable-hwaccel=h264_vdpau --enable-hwaccel=hevc_vdpau --enable-hwaccel=av1_vdpau --enable-libdrm --enable-hwaccel=h264_vulkan --enable-hwaccel=hevc_vulkan --enable-hwaccel=av1_vulkan --enable-libdav1d --enable-decoder=libdav1d"
        git clone https://github.com/FFmpeg/FFmpeg.git FFmpeg
        cd FFmpeg
        git checkout $FFMPEG_REV
        ./configure $FFMPEG_CONFIGURE_ARGS
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        cd ..

    - name: Install linuxdeployqt
      run: |
        mkdir $HOME/bin
        wget -O $HOME/bin/linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod a+x $HOME/bin/linuxdeployqt

    - name: Setup FUSE for AppImage
      run: |
        # Configure FUSE for AppImage in CI environment
        echo "Setting up FUSE environment for AppImage..."
        
        # Check if FUSE is available
        if [ -f /dev/fuse ]; then
          echo "✅ /dev/fuse is available"
        else
          echo "❌ /dev/fuse not found, trying to create..."
          sudo mknod /dev/fuse c 10 229 || echo "Failed to create /dev/fuse"
          sudo chmod 666 /dev/fuse || echo "Failed to set permissions on /dev/fuse"
        fi
        
        # Check FUSE library
        ldconfig -p | grep fuse || echo "FUSE library not found in ldconfig"
        
        # Set environment variable for AppImage extraction mode if FUSE fails
        echo "APPIMAGE_EXTRACT_AND_RUN=1" >> $GITHUB_ENV

    - name: Get version
      run: |
        VERSION=$(cat app/version.txt)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build AppImage
      env:
        APPIMAGE_EXTRACT_AND_RUN: 1
      run: |
        # Qt5 环境变量已废弃，使用 Qt6 环境
        # export QT_SELECT=5
        # export PATH=/usr/lib/qt5/bin:$PATH
        # export QT_QPA_PLATFORM_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins
        
        # Add linuxdeployqt to PATH
        export PATH=$PATH:$HOME/bin
        
        echo "Building AppImage with CI-optimized settings..."
        echo "APPIMAGE_EXTRACT_AND_RUN=$APPIMAGE_EXTRACT_AND_RUN"
        echo "PATH includes: $HOME/bin"
        
        # Run the build script
        scripts/build-appimage.sh

    - name: Upload AppImage artifact
      uses: actions/upload-artifact@v4
      with:
        name: Moonlight-r${{ env.BUILD_NUMBER }}-x86_64.AppImage
        path: build/installer-release/Moonlight-*-x86_64.AppImage

  build-steamlink:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Install dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt update
        sudo apt install -y libc6:i386 libstdc++6:i386

    - name: Download SteamLink SDK
      run: |
        git clone --depth=1 https://github.com/ValveSoftware/steamlink-sdk.git $HOME/steamlink-sdk

    - name: Get version
      run: |
        VERSION=$(cat app/version.txt)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build SteamLink app
      run: |
        STEAMLINK_SDK_PATH=$HOME/steamlink-sdk scripts/build-steamlink-app.sh

    - name: Upload SteamLink artifact
      uses: actions/upload-artifact@v4
      with:
        name: Moonlight-SteamLink-r${{ env.BUILD_NUMBER }}
        path: build/installer-release/Moonlight-SteamLink-*.zip

  release:
    if: github.event_name == 'release'
    needs: [build-windows, build-macos, build-linux, build-steamlink]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/*.exe
          **/*.zip
          **/*.dmg
          **/*.AppImage
      env:
        GITHUB_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
